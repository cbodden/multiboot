#!/bin/bash

LANG=C
set -o pipefail
set -o nounset
set -o errexit
NAME=$(basename $0)

# text format && color for messages
ORN=$(tput setaf 3); RED=$(tput setaf 1); BLU=$(tput setaf 4)
GRN=$(tput setaf 40); CLR=$(tput sgr0)
FMT="%s%-44s%s"
MNHDR="${BLU}[*]${CLR} "; BDHDR="${RED}[*]${CLR}"; COLHDR="${GRN}[*]${CLR} "
# printf "${FMT}" "${MNHDR}" "message" ": "

function version()
{
  clear
  local VER="0.10"
  cat <<EOL

                             ${NAME} version ${VER}
                  Copyright (C) 2014 cesar@pissedoffadmins.com
                This program comes with ABSOLUTELY NO WARRANTY.
         This is free software, and you are welcome to redistribute it.

EOL
}

function description()
{
  cat <<EOL

    This script is used to create a grub2 bootable flash disc with multiple,
                  current linux distros, OpenBSD, and NetBSD.
           At present for full install, you will need a flash disk of
                            at least 4GB or larger.

EOL
}

function usage()
{
  cat <<EOL

Usage: sudo ${NAME} < debug (-d) | install (-i) | help (-h) >

Usage examples:
  sudo ${NAME} debug (-d)   # will install iso's and grub.conf to local disk

  sudo ${NAME} install (-i) # will install iso's and grub.conf to usb disk

  sudo ${NAME} help         # shows this message

EOL
}

# OS check && trap statement
[[ $(uname) != "Linux" ]] && { printf "${RED}Needs Linux\n${CLR}"; exit 1; }
trap 'printf "\n${NAME}: Ouch! Quitting.\n\n" 1>&2 ; \
  rm -rf ${TMP_FILE} ; exit 1' 0 1 2 3 9 15

# tmp file for function lines
TMP_FILE=$(mktemp --tmpdir multiboot.$$.XXXXXXXXXX)

# check for sudo / root
readonly R_UID="0"
[[ "${UID}" -ne "${R_UID}" ]] && { printf "\nNeeds sudo\n\n"; version;
  description; usage; exit 1; }

readonly USBTMPDIR="/usbtmpdir"
readonly GRUBCONF="${USBTMPDIR}/boot/grub/grub.cfg"

function cleanup()
{
  sync
  umount ${USBSTICK}1
  rm ${USBTMPDIR} -rf
  rm -rf ${TMP_FILE}
}

function cleanup_debug()
{
  rm -rf ${TMP_FILE}
}

function logd()
{
  local LOGFILE=/tmp/$0
  printf "%-20s %-10s %-10s %-10s %-10s\n" `date "+%Y%m%d_%H%M"` \
    "[${1}]" "${2}" "${3}" "${4}" >> ${LOGFILE}
}

function disk_detect()
{
  typeset -r MAINPROMPT="Select a disk to use: "
  ##declare -a ARR=(`for DRIVE in $(fdisk -l | grep Disk |
  ##  grep -v "Disklabel\|identifier" | awk '{print $2}' | cut -d: -f1);
  ##  do echo $DRIVE ; done`)
  declare -a ARR=($(for DRIVE in $(fdisk -l |
    awk '/Disk/&&!/ident|label/{print $2}' | cut -d: -f1);
    do echo $DRIVE ; done))
  PS3=$MAINPROMPT
  clear
  select DRV in "${ARR[@]}"; do
    case "${DRV}" in
      ${DRV}) [[ -n $(df | grep "${DRV}") ]] &&
        { echo -e "${DRV} is used by:\n$(df | grep "${DRV}")"; exit 1; } ||
        { readonly USBSTICK="${DRV}"; } ;;
    esac
    readonly DRV_CLEAN=$(echo "${USBSTICK}" | cut -d"/" -f3)
    break
  done
}

function disk_action()
{
  ## do not touch this section or you break the fdisk function!!!
  dd if=/dev/zero of=${USBSTICK} bs=1M count=1
  ## testing parted instead
  # parted -s ${usbstick} -- mklabel msdos \
      # mkpart primary 0% 100%
  # mkfs.vfat ${USBSTICK}1 -n multiboot
  ## try doing disk detect with :
  # lsblk --nodeps --output NAME,TRAN,RM
  # http://unix.stackexchange.com/questions/40143/how-to-know-if-dev-sdx-is-a-connected-usb-or-hdd
fdisk ${USBSTICK} <<EOF
n
p
1


t
c
a
1
w
EOF
  mkfs.vfat ${USBSTICK}1 -n multiboot
}

function grub_disk()
{
  mkdir ${USBTMPDIR}
  mount ${USBSTICK}1 ${USBTMPDIR}
  readonly UUID=$(ls -al /dev/disk/by-uuid/ | \
    grep ${DRV_CLEAN}1 | awk '{print $9}')
  [[ -n $(which grub2-install 2>/dev/null) ]] &&
    { grub2-install --no-floppy --root-directory=${USBTMPDIR} ${USBSTICK}; } ||
    { grub-install --no-floppy --root-directory=${USBTMPDIR} ${USBSTICK}; }
  mkdir ${USBTMPDIR}/iso/
}

function grub_disk_debug()
{
  mkdir -p ${USBTMPDIR} ${USBTMPDIR}/iso/ ${USBTMPDIR}/boot/grub/
}

function grub_header()
{
echo "set timeout=300
set default=0
set menu_color_normal=white/black
set menu_color_highlight=white/green
" >> ${GRUBCONF}
}
