#!/usr/bin/env bash

LANG=C
set -o pipefail
set -o nounset
set -o errexit
NAME=$(basename $0)

function cleanup()
{
    sync
    umount ${USBSTICK}1
    rm ${USBTMPDIR} -rf
    rm -rf ${TMP_FILE}
}

function cleanup_debug()
{
    rm -rf ${TMP_FILE}
}

function description()
{
# created with cat file | gzip | base64
DESC="
H4sIAMR0Y1cAA1WOQQrCQAxF9z3FP0DpQryARXCnC71A2qbtYJwpSQb19k5B0L7VJyQ/D/hym4PB
eg2Lo6RsPMATemVyBmHS3O3QpeTUCWMUshlDsB7P4HOFfx5ZPCzCNfqsytEhIebXuu6arMZl4dhe
jzUoDjizl9xsKg6ORdnW0zEpxiyCEM1JpMY75fK0TCIXSfq53LH12JJGUDFhMsf+1KL0CunE2lQf
DyfycAYBAAA="
echo "${DESC}" | base64 -d | gunzip
}

function grub_disk()
{
mkdir ${USBTMPDIR}
mount ${USBSTICK}1 ${USBTMPDIR}
readonly UUID=$(ls -al /dev/disk/by-uuid/ \
    | grep ${DRV_CLEAN}1 \
    | awk '{print $9}')
[[ -n $(which grub2-install 2>/dev/null) ]] \
    && { grub2-install --no-floppy --root-directory=${USBTMPDIR} ${USBSTICK}; } \
    || { grub-install --no-floppy --root-directory=${USBTMPDIR} ${USBSTICK}; }
mkdir ${USBTMPDIR}/iso/
}

function grub_disk_debug()
{
    mkdir -p ${USBTMPDIR} ${USBTMPDIR}/iso/ ${USBTMPDIR}/boot/grub/
}

function grub_header()
{
echo "set timeout=300
set default=0
set menu_color_normal=white/black
set menu_color_highlight=white/green
" >> ${GRUBCONF}
}

function logd()
{
  local LOGFILE=/tmp/$0
  printf "%-20s %-10s %-10s %-10s %-10s\n" `date "+%Y%m%d_%H%M"` \
    "[${1}]" "${2}" "${3}" "${4}" >> ${LOGFILE}
}

function disk_detect()
{
    typeset -r MAINPROMPT="Select a USB disk to use: "
    declare -a ARR=($(for DRIVE in $(lsblk -d -n -o NAME,TRAN \
        | awk '/usb/{ print "/dev/"$1 }'); do echo $DRIVE ; done))
    PS3=$MAINPROMPT
    clear
    select DRV in "${ARR[@]}"
    do
        case "${DRV}" in
        ${DRV}) [[ -n $(df | grep "${DRV}") ]] \
            && { echo -e "${DRV} is used by:\n$(df | grep "${DRV}")"; exit 1; } \
            || { readonly USBSTICK="${DRV}"; } ;;
        esac
        readonly DRV_CLEAN=$(echo "${USBSTICK}" | cut -d"/" -f3)
        break
    done
}

function disk_action()
{
    dd if=/dev/zero of=${USBSTICK} bs=1M count=1
    parted -s ${USBSTICK} -- mklabel msdos \
        mkpart primary 0% 100%
    mkfs.vfat ${USBSTICK}1 -n multiboot
}

function main()
{
    # text format && color for messages
    # printf "${FMT}" "${MNHDR}" "message" ": "
    readonly ORN=$(tput setaf 3)
    readonly RED=$(tput setaf 1)
    readonly BLU=$(tput setaf 4)
    readonly GRN=$(tput setaf 40)
    readonly CLR=$(tput sgr0)
    readonly FMT="%s%-44s%s"
    readonly MNHDR="${BLU}[*]${CLR} "
    readonly BDHDR="${RED}[*]${CLR}"
    readonly COLHDR="${GRN}[*]${CLR} "

    # OS check && trap statement
    [[ $(uname) != "Linux" ]] \
        && { printf "${RED}Needs Linux\n${CLR}"; exit 1; }
    trap 'printf "\n${NAME}: Ouch! Quitting.\n\n" 1>&2 ; \
        rm -rf ${TMP_FILE} ; exit 1' 1 2 3 9 15

    # tmp file for function lines
    TMP_FILE=$(mktemp --tmpdir multiboot.$$.XXXXXXXXXX)

    # check for sudo / root
    readonly R_UID="0"
    [[ "${UID}" -ne "${R_UID}" ]] \
        && { printf "\nNeeds sudo\n\n"; version; description; usage; exit 1; }

    readonly USBTMPDIR="/usbtmpdir"
    readonly GRUBCONF="${USBTMPDIR}/boot/grub/grub.cfg"
}

function pause()
{
    read -p "$*"
}

function usage()
{
  cat <<EOL

Usage: sudo ${NAME} < debug (-d) | install (-i) | help (-h) >

Usage examples:
  sudo ${NAME} debug (-d)   # will install iso's and grub.conf to local disk

  sudo ${NAME} install (-i) # will install iso's and grub.conf to usb disk

  sudo ${NAME} help         # shows this message

EOL
}

function version()
{
  clear
  local VER="0.40"
  cat <<EOL

                             ${NAME} version ${VER}
                  Copyright (C) 2014 cesar@pissedoffadmins.com
                This program comes with ABSOLUTELY NO WARRANTY.
         This is free software, and you are welcome to redistribute it.

EOL
}
